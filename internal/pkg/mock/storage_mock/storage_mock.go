// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/delinack/stock/internal/pkg/storage_mock (interfaces: Store)

// Package storage_mock is a generated GoMock package.
package storage_mock

import (
	context "context"
	reflect "reflect"

	domain_model "github.com/delinack/stock/internal/pkg/domain_model"
	model "github.com/delinack/stock/internal/pkg/model"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CheckAvailability mocks base method.
func (m *MockStore) CheckAvailability(arg0 context.Context, arg1 uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAvailability", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAvailability indicates an expected call of CheckAvailability.
func (mr *MockStoreMockRecorder) CheckAvailability(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAvailability", reflect.TypeOf((*MockStore)(nil).CheckAvailability), arg0, arg1)
}

// DeleteReservation mocks base method.
func (m *MockStore) DeleteReservation(arg0 context.Context, arg1 []model.ReservedItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReservation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReservation indicates an expected call of DeleteReservation.
func (mr *MockStoreMockRecorder) DeleteReservation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReservation", reflect.TypeOf((*MockStore)(nil).DeleteReservation), arg0, arg1)
}

// GetItemQuantity mocks base method.
func (m *MockStore) GetItemQuantity(arg0 context.Context, arg1 uuid.UUID, arg2 domain_model.ReserveItem) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemQuantity", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemQuantity indicates an expected call of GetItemQuantity.
func (mr *MockStoreMockRecorder) GetItemQuantity(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemQuantity", reflect.TypeOf((*MockStore)(nil).GetItemQuantity), arg0, arg1, arg2)
}

// GetItemsQuantity mocks base method.
func (m *MockStore) GetItemsQuantity(arg0 context.Context, arg1 *domain_model.GetItemsQuantityRequest) ([]model.ItemStock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsQuantity", arg0, arg1)
	ret0, _ := ret[0].([]model.ItemStock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsQuantity indicates an expected call of GetItemsQuantity.
func (mr *MockStoreMockRecorder) GetItemsQuantity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsQuantity", reflect.TypeOf((*MockStore)(nil).GetItemsQuantity), arg0, arg1)
}

// ReserveItems mocks base method.
func (m *MockStore) ReserveItems(arg0 context.Context, arg1 []model.ReservedItem, arg2 []model.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveItems", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReserveItems indicates an expected call of ReserveItems.
func (mr *MockStoreMockRecorder) ReserveItems(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveItems", reflect.TypeOf((*MockStore)(nil).ReserveItems), arg0, arg1, arg2)
}
